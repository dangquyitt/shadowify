// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: extractor.proto

package extractor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExtractorService_ExtractYoutubeMetadata_FullMethodName   = "/extractor.ExtractorService/ExtractYoutubeMetadata"
	ExtractorService_ExtractYoutubeTranscript_FullMethodName = "/extractor.ExtractorService/ExtractYoutubeTranscript"
)

// ExtractorServiceClient is the client API for ExtractorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Extractor service definition
type ExtractorServiceClient interface {
	// Extract YouTube metadata
	ExtractYoutubeMetadata(ctx context.Context, in *YoutubeRequest, opts ...grpc.CallOption) (*YoutubeMetadataResponse, error)
	// Extract YouTube transcript
	ExtractYoutubeTranscript(ctx context.Context, in *YoutubeRequest, opts ...grpc.CallOption) (*YoutubeTranscriptResponse, error)
}

type extractorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtractorServiceClient(cc grpc.ClientConnInterface) ExtractorServiceClient {
	return &extractorServiceClient{cc}
}

func (c *extractorServiceClient) ExtractYoutubeMetadata(ctx context.Context, in *YoutubeRequest, opts ...grpc.CallOption) (*YoutubeMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YoutubeMetadataResponse)
	err := c.cc.Invoke(ctx, ExtractorService_ExtractYoutubeMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extractorServiceClient) ExtractYoutubeTranscript(ctx context.Context, in *YoutubeRequest, opts ...grpc.CallOption) (*YoutubeTranscriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YoutubeTranscriptResponse)
	err := c.cc.Invoke(ctx, ExtractorService_ExtractYoutubeTranscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtractorServiceServer is the server API for ExtractorService service.
// All implementations must embed UnimplementedExtractorServiceServer
// for forward compatibility.
//
// Extractor service definition
type ExtractorServiceServer interface {
	// Extract YouTube metadata
	ExtractYoutubeMetadata(context.Context, *YoutubeRequest) (*YoutubeMetadataResponse, error)
	// Extract YouTube transcript
	ExtractYoutubeTranscript(context.Context, *YoutubeRequest) (*YoutubeTranscriptResponse, error)
	mustEmbedUnimplementedExtractorServiceServer()
}

// UnimplementedExtractorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExtractorServiceServer struct{}

func (UnimplementedExtractorServiceServer) ExtractYoutubeMetadata(context.Context, *YoutubeRequest) (*YoutubeMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractYoutubeMetadata not implemented")
}
func (UnimplementedExtractorServiceServer) ExtractYoutubeTranscript(context.Context, *YoutubeRequest) (*YoutubeTranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractYoutubeTranscript not implemented")
}
func (UnimplementedExtractorServiceServer) mustEmbedUnimplementedExtractorServiceServer() {}
func (UnimplementedExtractorServiceServer) testEmbeddedByValue()                          {}

// UnsafeExtractorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtractorServiceServer will
// result in compilation errors.
type UnsafeExtractorServiceServer interface {
	mustEmbedUnimplementedExtractorServiceServer()
}

func RegisterExtractorServiceServer(s grpc.ServiceRegistrar, srv ExtractorServiceServer) {
	// If the following call pancis, it indicates UnimplementedExtractorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExtractorService_ServiceDesc, srv)
}

func _ExtractorService_ExtractYoutubeMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YoutubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractorServiceServer).ExtractYoutubeMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtractorService_ExtractYoutubeMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractorServiceServer).ExtractYoutubeMetadata(ctx, req.(*YoutubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtractorService_ExtractYoutubeTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YoutubeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractorServiceServer).ExtractYoutubeTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtractorService_ExtractYoutubeTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractorServiceServer).ExtractYoutubeTranscript(ctx, req.(*YoutubeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtractorService_ServiceDesc is the grpc.ServiceDesc for ExtractorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtractorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "extractor.ExtractorService",
	HandlerType: (*ExtractorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractYoutubeMetadata",
			Handler:    _ExtractorService_ExtractYoutubeMetadata_Handler,
		},
		{
			MethodName: "ExtractYoutubeTranscript",
			Handler:    _ExtractorService_ExtractYoutubeTranscript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "extractor.proto",
}
